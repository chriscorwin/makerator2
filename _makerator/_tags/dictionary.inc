[//lasso/* this works as well as the method below 	var('user') = dictionary( 		'name' = 'John Smith', 		'address' = '1234 This Way', 		'city' = 'Anytown', 		'state' = 'KY', 		'zip' = 90210 				$user->name + '<br>'; 		$user->address + '<br>'; 		$user->city + ', ' + $user->state + ' ' + $user->zip; 								'<hr>Keys: ';     		$user->keys; 				'<hr>Values: '; 		$user->values; 				'<hr>Size: '; 		$user->size; 				'<hr>Remove and Contains: '; 		$user->remove('zip'); 		$user->contains('zip'); 				'<hr>Convert: '; 		$user; */ 	define_type(		'dictionary',		-prototype,		-description='A basic dictionary type.'	);			define_tag('oncreate');			local('ivars') = @self->properties->first;						iterate(params, local('i'));				if(!#i->first->waskeyword && #i->isa('pair'));					#ivars->insert(#i->first = #i->second);				/if;			/iterate;		/define_tag;		define_tag('size');			return(self->properties->first->size);		/define_tag;		define_tag('onconvert');			return(self->properties->first);		/define_tag;			define_tag('_unknowntag');					local('ivars') = @self->properties->first;			local('maptags') = @#ivars->properties->second;						#maptags->keys >> tag_name ? return(				@#maptags->find(tag_name)->run(					-owner=self->properties->first,					-params=params				)			);			#ivars->keys !>> tag_name ? #ivars->insert(tag_name = dictionary);			return(@#ivars->find(tag_name));		/define_tag;	/define_type;	/* SVN: $Id: dictionary.inc 312 2006-10-26 23:16:39Z Jason Huck $ */]